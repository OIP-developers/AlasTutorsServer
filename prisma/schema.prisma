generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// ==========================================================================================
// ==========================================================================================
// ==========================================================================================
// @Enums

enum Gender {
  MALE
  FEMALE
}

enum RoleCode {
  // ADMIN
  // STORE_ADMIN
  // STORE_PRODUCT_MANAGER
  // STORE_ORDER_MANAGER
  ADMIN
  STUDENT
  PARENT
  TEACHER
}

enum PhoneStatus {
  VERIFIED
  PENDING
  BLOCK
  WRONG
}

// ==========================================================================================
// ==========================================================================================
// ==========================================================================================

model Role {
  id        String   @id @default(uuid())
  code      RoleCode @unique
  status    Status   @default(PUBLIC)
  isActive  Boolean  @default(true)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Keystore {
  id           String    @id @default(uuid())
  primaryKey   String
  secondaryKey String
  status       Status    @default(PUBLIC)
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  clientId     String?
  client       User?     @relation(fields: [clientId], references: [id])
}

model Tokenstore {
  id        String    @id @default(uuid())
  type      TokenType
  token     String    @unique
  shot_code String    @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  expireAt  DateTime
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Example {
  id   String @id @default(uuid())
  name String

  status     Status?   @default(PUBLIC)
  isPublish  Boolean?  @default(true)
  isVerified Boolean?  @default(true)
  isDeleted  Boolean?  @default(false)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model User {
  id                String      @id @default(uuid())
  email             String?     @unique
  username          String?     @unique
  password          String
  phone_status      PhoneStatus
  stripe_customerId String?

  first_name      String?
  last_name       String?
  phone           Int?
  profile_picture String?
  gender          Gender?
  profile         String?
  dateOfBirth     DateTime?

  status     Status?   @default(PUBLIC)
  isAccepted Boolean?  @default(false)
  isVerified Boolean?  @default(true)
  isActive   Boolean?  @default(true)
  isDeleted  Boolean?  @default(false)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  roleId String @default("167fab49-72bc-4e03-80e6-439a9c00c12c")
  role   Role   @relation(fields: [roleId], references: [id])

  invoices   Invoice[]
  Keystore   Keystore[]
  tokenstore Tokenstore[]
  wallet     Wallet?
  Order      Order[]
  Cart       Cart[]

  courseReview courseReview[]
}

model File {
  id String @id @default(uuid())

  public_source_url  String
  private_source_url String

  size       String
  type       String
  dimensions String?
  length     String?

  isPublish  Boolean?  @default(true)
  isVerified Boolean?  @default(true)
  isDeleted  Boolean?  @default(false)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  Video      Video[]
}

model Wallet {
  id String @id @default(uuid())

  coins Int @default(0)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invoice {
  id       String   @id @default(uuid())
  stripe   String   @unique
  price    Int
  currency Currency

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String @unique

  status    InvoiceStatus
  isDeleted Boolean?      @default(false)
  createdAt DateTime?     @default(now())
  updatedAt DateTime?     @updatedAt
}

enum TokenType {
  SIGNIN
  SIGNUP
  EMAIL_VERIFY
  PHONE_VERIFY
  TWO_FACTOR_AUTHENTICATION
  FORGOT_PASSWORD
}

enum SubscriptionType {
  CUSTOM
  PRE_DEFINED
  REQUESTED
}

enum Currency {
  USD
}

enum InvoiceStatus {
  initiated
  paid
  reject
  cancel
}

enum Status {
  PUBLIC
  PRIVATE
  DRAFT
}

model Category {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique @default(uuid())
  title       String?
  description String?
  order       Int
  image       String?
  // parent_categoryId String?
  // parent_category   Category? @relation("SubCategoryCategory", fields: [parent_categoryId], references: [id], onDelete: Cascade)
  status      Status?   @default(PUBLIC)
  isDeleted   Boolean?  @default(false)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  // subCategory     SubCategory[]
  productCategory ProductCategory[]
  // categories      Category[]        @relation("SubCategoryCategory")
}

model Product {
  id             String    @id @default(uuid())
  title          String
  desc           String    @db.Text
  price          Int
  featured_image String
  status         Status?   @default(PUBLIC)
  isDeleted      Boolean?  @default(false)
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt

  orderItems OrderItems[]
  categories ProductCategory[]
  // gallery    ProductImage[]
  // tags       ProductTag[]
  Cart       Cart[]
}

model ProductCategory {
  id String @id @default(uuid())

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // subCategoryId String?
  // subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)

  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model CourseCategory {
  id                String              @id @default(uuid())
  name              String
  description       String?
  imageUrl          String?
  courseSubCategory CourseSubCategory[]
}

model CourseSubCategory {
  id               String          @id @default(uuid())
  name             String
  description      String?
  imageUrl         String?
  courseCategory   CourseCategory? @relation(fields: [courseCategoryId], references: [id])
  courseCategoryId String?
  courses          Course[]
}

model courseReview {
  id       String  @id @default(uuid())
  user     User?   @relation(fields: [userId], references: [id])
  userId   String?
  course   Course? @relation(fields: [courseId], references: [id])
  courseId String?
  review   Float
  comment  String
}

model Course {
  id                  String             @id @default(uuid())
  title               String
  description         String
  price               Int?
  about               String?
  discussion          String?
  imageUrl            String?
  courseSubCategory   CourseSubCategory? @relation(fields: [courseSubCategoryId], references: [id])
  courseSubCategoryId String?
  rating              Float?
  Videos              Video[]
  courseReviews       courseReview[]
}

model Video {
  id       String  @id @default(uuid())
  title    String
  content  String
  course   Course? @relation(fields: [courseId], references: [id])
  courseId String?
  file     File?   @relation(fields: [fileId], references: [id])
  fileId   String?
}

// model ProductImage {
//   id    String  @id @default(uuid())
//   image String?

//   product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
//   productId String

//   createdAt DateTime? @default(now())
//   updatedAt DateTime? @updatedAt
// }

// model ProductTag {
//   id  String @id @default(uuid())
//   tag String

//   product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
//   productId String?

//   createdAt DateTime? @default(now())
//   updatedAt DateTime? @updatedAt
// }

model Order {
  id String @id @default(uuid())

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  company_name String?
  fullname     String?
  email        String?
  phone        Int?

  address  String?
  city     String?
  state    String?
  zip_code String?
  country  String?

  sub_total Int?
  total     Int?

  status    Status?      @default(PUBLIC)
  isDeleted Boolean?     @default(false)
  createdAt DateTime?    @default(now())
  updatedAt DateTime?    @updatedAt
  invoice   Invoice?
  items     OrderItems[]
}

model Cart {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  Product   Product @relation(fields: [ProductId], references: [id], onDelete: Cascade)
  ProductId String

  quantity Int?

  isDeleted Boolean?  @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model OrderItems {
  id String @id @default(uuid())

  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?

  quantity Int?
  price    Int?

  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  isDeleted Boolean?  @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}
