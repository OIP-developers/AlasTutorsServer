generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// ==========================================================================================
// ==========================================================================================
// ==========================================================================================
// @Enums

enum Gender {
  MALE
  FEMALE
}

enum RoleCode {
  // ADMIN
  // STORE_ADMIN
  // STORE_PRODUCT_MANAGER
  // STORE_ORDER_MANAGER
  ADMIN
  STUDENT
  PARENT
  TEACHER
}

enum PhoneStatus {
  VERIFIED
  PENDING
  BLOCK
  WRONG
}

// ==========================================================================================
// ==========================================================================================
// ==========================================================================================

model Role {
  id        String   @id @default(uuid())
  code      RoleCode @unique
  status    Status   @default(PUBLIC)
  isActive  Boolean  @default(true)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Keystore {
  id           String    @id @default(uuid())
  primaryKey   String
  secondaryKey String
  status       Status    @default(PUBLIC)
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  clientId     String?
  client       User?     @relation(fields: [clientId], references: [id])
}

model Tokenstore {
  id        String    @id @default(uuid())
  type      TokenType
  token     String    @unique
  shot_code String    @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  expireAt  DateTime
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String      @id @default(uuid())
  email             String?     @unique
  username          String?     @unique
  password          String
  phone_status      PhoneStatus
  stripe_customerId String

  first_name      String?
  last_name       String?
  phone           Int?
  profile_picture String?
  gender          Gender?
  profile         String?
  dateOfBirth     DateTime?

  address   String?
  city      String?
  state     String?
  zipCode   Int?
  country   String?
  timezone  String?
  aboutInfo String?

  status     Status?   @default(PUBLIC)
  isAccepted Boolean?  @default(false)
  isVerified Boolean?  @default(true)
  isActive   Boolean?  @default(true)
  isDeleted  Boolean?  @default(false)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  invoices   Invoice[]
  Keystore   Keystore[]
  tokenstore Tokenstore[]
  reviews    CourseReview[]
  files      File[]
  courses    Course[]
  cart       CartItem[]
  orders     Order[]
}

model File {
  id String @id @default(uuid())

  public_source_url  String
  private_source_url String

  uploadedBy   User?   @relation(fields: [uploadedById], references: [id])
  uploadedById String?

  size       String
  type       String
  dimensions String?
  length     String?

  status    Status?   @default(PUBLIC)
  isDeleted Boolean?  @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  courseThumbnail Course[] @relation("thumbnail")
  courseBanner    Course[] @relation("banner")
  courseVideos    Video[]
  courseAudios    Audio[]
}

enum TokenType {
  SIGNIN
  SIGNUP
  EMAIL_VERIFY
  PHONE_VERIFY
  TWO_FACTOR_AUTHENTICATION
  FORGOT_PASSWORD
}

enum SubscriptionType {
  CUSTOM
  PRE_DEFINED
  REQUESTED
}

enum Currency {
  USD
  PKR
  INR
}

enum InvoiceStatus {
  initiated
  paid
  reject
  cancel
}

enum Status {
  PUBLIC
  PRIVATE
  DRAFT
}

model CourseCategory {
  id   String @id @default(uuid())
  slug String @unique @default(uuid())

  name        String
  description String?
  thumbnail   String?

  status    Status?   @default(PUBLIC)
  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  courses Course[]
}

model CourseReview {
  id String @id @default(uuid())

  rating  Float
  comment String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  course   Course? @relation(fields: [courseId], references: [id])
  courseId String?

  status    Status?   @default(PUBLIC)
  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Course {
  id   String @id @default(uuid())
  slug String @unique @default(uuid())

  title       String
  description String
  rating      Float? @default(0.0)

  thumbnail   File   @relation("thumbnail", fields: [thumbnailId], references: [id])
  thumbnailId String

  banner   File   @relation("banner", fields: [bannerId], references: [id])
  bannerId String

  price    Float
  currency Currency? @default(USD)

  category   CourseCategory? @relation(fields: [categoryId], references: [id])
  categoryId String

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  status    Status?   @default(PUBLIC)
  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  videos     Video[]
  reviews    CourseReview[]
  audios     Audio[]
  tags       Tag[]
  cartItems  CartItem[]
  OrderItems OrderItems[]
}

model Tag {
  id String @id @default(uuid())

  title String

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Video {
  id   String @id @default(uuid())
  slug String @unique @default(uuid())

  title       String
  description String

  course   Course? @relation(fields: [courseId], references: [id])
  courseId String?

  media   File?   @relation(fields: [mediaId], references: [id])
  mediaId String?

  status    Status?   @default(PUBLIC)
  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Audio {
  id   String @id @default(uuid())
  slug String @unique @default(uuid())

  title       String
  description String

  course   Course? @relation(fields: [courseId], references: [id])
  courseId String?

  media   File?   @relation(fields: [mediaId], references: [id])
  mediaId String?

  status    Status?   @default(PUBLIC)
  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model CartItem {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Order {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  sub_total Int
  total     Int

  isDeleted Boolean?     @default(false)
  createdAt DateTime?    @default(now())
  updatedAt DateTime?    @updatedAt
  invoice   Invoice?
  items     OrderItems[]
}

model OrderItems {
  id String @id @default(uuid())

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  price Int

  course   Course @relation(fields: [CourseId], references: [id])
  CourseId String

  isDeleted Boolean?  @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Invoice {
  id       String   @id @default(uuid())
  stripe   String   @unique
  price    Int
  currency Currency

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String @unique

  status    InvoiceStatus
  isDeleted Boolean?      @default(false)
  createdAt DateTime?     @default(now())
  updatedAt DateTime?     @updatedAt
}
