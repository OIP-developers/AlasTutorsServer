generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================================================================
// ==========================================================================================
// ==========================================================================================
// ENUMS

enum TokenType {
  SIGNIN
  SIGNUP
  EMAIL_VERIFY
  PHONE_VERIFY
  TWO_FACTOR_AUTHENTICATION
  FORGOT_PASSWORD
}

enum SubscriptionType {
  CUSTOM
  PRE_DEFINED
  REQUESTED
}

enum Currency {
  USD
  PKR
  INR
}

enum InvoiceStatus {
  initiated
  paid
  reject
  cancel
}

enum Status {
  PUBLIC
  PRIVATE
  DRAFT
}

enum SubjectChoice {
  ENGLISH
  MATHS
  FRENCH
  SCIENCE
  SPANISH
}

enum WEEK_DAYS {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum WORK_DAYS {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  EVERY_DAY
}

enum EmploymentPostion {
  ENGLISH_TEACHER
  MATHS_TEACHER
  SCIENCE_TEACHER
  LANGUAGE_TEACHER
  OTHER
}

enum ProofOfRightToWork {
  PRE_SETTLED_STATUS
  SETTLED_STATUS
  BRITISH_PASSPORT
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
}

enum RoleCode {
  ANONYMOUS
  ADMIN
  TEACHER
  PARENT
  STUDENT
  OTHER
  CONSUMER
}

enum PhoneStatus {
  VERIFIED
  PENDING
  BLOCK
  WRONG
}

enum EmailStatus {
  VERIFIED
  PENDING
  BLOCK
  WRONG
}

enum GuardianType {
  MOTHER
  FATHER
  OTHER
}

// ENUMS
// ==========================================================================================
// ==========================================================================================
// ==========================================================================================
// MODELS

model TuitionDetails {
  tuitionType         String
  subjectChoice       SubjectChoice
  schoolDayAndTime    String
  summerSchoolHalfDay WEEK_DAYS
  summerSchoolFullDay WEEK_DAYS
  feeSubscription     String
  studentId           String
  student             Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@id([studentId])
}

model AvaiableForWorkDays {
  id     String    @id @default(uuid())
  day    WORK_DAYS
  userId String
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EduicationLevelTeach {
  id     String    @id @default(uuid())
  day    WORK_DAYS
  userId String
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmploymentApplication {
  position                EmploymentPostion  @default(ENGLISH_TEACHER)
  subject                 String?
  nationalInsuranceNumber String?
  isRightToWorkInUK       Boolean
  isFullyQualified        Boolean
  proofOfRightToWork      ProofOfRightToWork
  teacherId               String
  teacher                 User               @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@id([teacherId])
}

model Role {
  id        String   @id @default(uuid())
  code      RoleCode @unique
  status    Status   @default(PUBLIC)
  isActive  Boolean  @default(true)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Keystore {
  id           String    @id @default(uuid())
  primaryKey   String
  secondaryKey String
  status       Status    @default(PUBLIC)
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  clientId     String?
  client       User?     @relation(fields: [clientId], references: [id])
}

model Tokenstore {
  id        String    @id @default(uuid())
  type      TokenType
  token     String    @unique
  shot_code String    @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  expireAt  DateTime
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  line1      String
  line2      String?
  state      String?
  city       String
  postalCode String
  country    String
  user       User    @relation(fields: [userId], references: [id])
  userId     String

  @@id([userId])
}

model EmergencyContact {
  first_name      String
  last_name       String
  phone           String
  emergency_phone String
  email           String?
  gp_name         String
  line1           String
  line2           String?
  city            String
  postalCode      String
  country         String
  user            User    @relation(fields: [userId], references: [id])
  userId          String

  @@id([userId])
}

model MedicalCondition {
  isMedicalConditions Boolean @default(false)
  typeOfCondition     String?
  medicationGiven     String?
  studentId           String
  student             Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@id([studentId])
}

model Student {
  id                      String            @id @default(uuid())
  first_name              String
  middle_name             String?
  last_name               String
  gender                  Gender
  dateOfBirth             DateTime
  yearGroup               String
  isPromotionAllowed      Boolean           @default(false)
  isSpecialEducationNeeds Boolean           @default(false)
  isSiblingEnrolled       Boolean           @default(false)
  sibling_first_name      String?
  sibling_last_name       String?
  deletedAt               DateTime?
  createdAt               DateTime          @default(now())
  updatedAt               DateTime?         @updatedAt
  parentId                String
  parent                  User?             @relation(fields: [parentId], references: [id])
  medicalCondition        MedicalCondition?
  tuitionDetails          TuitionDetails?
}

model Guardian {
  id          String  @id @default(uuid())
  first_name  String?
  middle_name String?
  last_name   String?
  title       String?

  type   GuardianType
  userId String
  user   User         @relation(fields: [userId], references: [id])
}

model User {
  id                String  @id @default(uuid())
  email             String  @unique
  password          String // auto generate
  phone             String?
  stripe_customerId String?

  first_name      String?
  middle_name     String?
  last_name       String?
  title           String?
  preffered_name  String?
  profile_picture String?
  gender          Gender?
  dateOfBirth     DateTime?
  yearGroup       String?

  status       Status?      @default(PUBLIC)
  emailStatus  EmailStatus? @default(PENDING)
  phone_status PhoneStatus? @default(PENDING)

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  address          Address?
  emergencyContact EmergencyContact?

  guardians             Guardian[]
  invoices              Invoice[]
  keystore              Keystore[]
  tokenstore            Tokenstore[]
  reviews               CourseReview[]
  files                 File[]
  courses               Course[]
  orders                Order[]
  cart                  Cart[]
  wallet                Wallet?
  views                 View[]
  students              Student[]
  employmentApplication EmploymentApplication?
  AvaiableForWorkDays   AvaiableForWorkDays[]
  EduicationLevelTeach  EduicationLevelTeach[]
}

model File {
  id String @id @default(uuid())

  public_source_url  String
  private_source_url String

  uploadedBy   User?   @relation(fields: [uploadedById], references: [id])
  uploadedById String?

  size       String
  type       String
  dimensions String?
  length     String?

  status    Status?   @default(PUBLIC)
  isDeleted Boolean?  @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  courseThumbnail Course[] @relation("thumbnail")
  courseBanner    Course[] @relation("banner")
  courseVideos    Video[]
  courseAudios    Audio[]

  mediaVideo Video[] @relation("media")

  thumbnailVideo Video[] @relation("thumbnailVideo")
}

model CourseCategory {
  id   String @id @default(uuid())
  slug String @unique @default(uuid())

  name        String
  description String?
  imageUrl    String?

  status    Status?   @default(PUBLIC)
  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  courses Course[]
}

model CourseReview {
  id String @id @default(uuid())

  rating  Float
  comment String

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String?

  status    Status?   @default(PUBLIC)
  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Course {
  id   String @id @default(uuid())
  slug String @unique @default(uuid())

  title       String
  description String
  rating      Float? @default(0.0)

  thumbnail   File?   @relation("thumbnail", fields: [thumbnailId], references: [id], onDelete: Cascade)
  thumbnailId String?

  banner   File?   @relation("banner", fields: [bannerId], references: [id], onDelete: Cascade)
  bannerId String?

  price    Float
  discount Float?
  currency Currency? @default(USD)

  category   CourseCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String?

  createdBy   User?   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String?

  status    Status?   @default(PUBLIC)
  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  videos     Video[]
  reviews    CourseReview[]
  audios     Audio[]
  tags       Tag[]
  orderItems OrderItems[]
  Cart       Cart[]
}

model Tag {
  id String @id @default(uuid())

  title String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Video {
  id   String @id @default(uuid())
  slug String @unique @default(uuid())

  title       String
  description String

  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String?

  media   File?   @relation("media", fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId String?

  thumbnail   File?   @relation("thumbnailVideo", fields: [thumbnailId], references: [id], onDelete: Cascade)
  thumbnailId String?

  status    Status?   @default(PUBLIC)
  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  File      File?     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId    String?

  views View[]
}

model View {
  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@id([videoId, userId])
}

model Audio {
  id   String @id @default(uuid())
  slug String @unique @default(uuid())

  title       String
  description String

  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String?

  media   File?   @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId String?

  status    Status?   @default(PUBLIC)
  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Order {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  sub_total Int?
  total     Int

  isDeleted Boolean?     @default(false)
  createdAt DateTime?    @default(now())
  updatedAt DateTime?    @updatedAt
  items     OrderItems[]
}

model Wallet {
  id String @id @default(uuid())

  coins Int @default(0)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItems {
  id String @id @default(uuid())

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String

  price Float

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  isDeleted Boolean?  @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Invoice {
  id       String   @id @default(uuid())
  stripe   String   @unique
  price    Float
  currency Currency

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  status    InvoiceStatus
  isDeleted Boolean?      @default(false)
  createdAt DateTime?     @default(now())
  updatedAt DateTime?     @updatedAt
}

model Sequence {
  id       String @id @default(uuid())
  users    Int
  students Int
}

model Cart {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  isDeleted Boolean?  @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}
